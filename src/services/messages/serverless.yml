service:
  name: ${self:custom.service.mainName}-messages

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  service:
    mainName: serverless-ts-boilerplate
  webpack:
    webpackConfig: ../../../webpack.config.js
    includeModules: false #modules should be in layer
  usedLayers:
    layerVersion: 1
    modules: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:${self:custom.service.mainName}-layers-${self:provider.stage}:${self:custom.usedLayers.layerVersion}
  common:
    cors: ${file(../common/cors.yml)}
    apiGateway: ${file(../common/apiGateway.yml)}

provider:
  name: aws
  region: 'us-east-1'
  runtime: nodejs8.10
  stage: dev
  memorySize: 256
  timeout: 10
  environment:
    NODE_PATH: "./:/opt/node_modules" # new path to layered node_modules
  tags:
    environment: ${self:provider.stage}
    project: ${self:service.name}

functions:
    createChatMessage:
      handler: createChatMessage.handler
      layers:
        - ${self:custom.usedLayers.modules}
      events:
        - http:
            method: POST
            path: /messages
            private: false
            cors: ${self:custom.common.cors.defaultCache}
    getMessage:
      handler: getMessage.handler
      layers:
        - ${self:custom.usedLayers.modules}
      events:
        - http:
            method: GET
            path: /messages
            private: false
            cors: ${self:custom.common.cors.defaultCache}
    getRoomMessages:
      handler: handler.getRoomMessages
      layers:
        - ${self:custom.usedLayers.modules}
      events:
        - http:
            method: GET
            path: /messages/room/{room}
            private: false
            cors: ${self:custom.common.cors.defaultCache}
    getUserMessages:
      handler: handler.getUserMessages
      layers:
        - ${self:custom.usedLayers.modules}
      events:
        - http:
            method: GET
            path: /messages/user/{userId}
            private: false
            cors: ${self:custom.common.cors.defaultCache}

resources:
  Resources:
    GatewayResponseExpiredToken: ${self:custom.common.apiGateway.GatewayResponseExpiredToken}
    GatewayResponseDefault4XX: ${self:custom.common.apiGateway.GatewayResponseDefault4XX}